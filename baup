#!/bin/bash

# File with the files to backup
FILE="$HOME/.baup/files.txt"

# Define colors
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

FILE_DIRECTORY=$(dirname $FILE)

function import_files(){
  # Evaluates the file/files passed as argument
  file_all=$(eval echo "$1")
  
  for file in $file_all; do
    directory_all=$(eval echo "$2")
    file_name=$(basename "$file")
    # Check if file exists in specified path
    if [ -f "$file" ]; then
      # Create backup directory if it doesn't exist
      mkdir -p $FILE_DIRECTORY
      # Create directory structure in backup directory
      mkdir -p "$FILE_DIRECTORY/$directory_all" 
      # Copy file to backup directory
      if cp "$file" "$FILE_DIRECTORY/$directory_all"; then
        echo -e " [${GREEN}OK${NC}] Copied $file_name to $FILE_DIRECTORY/$directory_all"
      else 
        echo -e " [${RED}ERROR${NC}] Error while copying $file_name"
      fi
    # Checks if file is a directory (if it is, it will import all files in the directory)
    elif [ -d "$file" ]; then
      rel_path="${file#${1/\~/$HOME}}"
      mkdir -p $FILE_DIRECTORY/$directory_all/$rel_path
      file+="/*"
      directory_all+="/$rel_path"
      import_files "$file" "$directory_all"
    elif [ ! -z "$file" ]; then
      if [ "$file_name" == "*" ]; then
        echo -e " [${RED}ERROR${NC}] No files in $(dirname $file)"
      else
        echo -e " [${RED}ERROR${NC}] $file_name does not exist"
      fi
    fi
  done
}

function export_files(){
# Read list of file paths and names from files.txt
    file_all=$(eval echo "$1")
    file_path=$(dirname "$1")

  for file in $file_all; do
    directory_all=$(eval echo "$2")
    file_name=$(basename "$file")
    # Check if file exists in backup directory
    if [ -f "$FILE_DIRECTORY/$directory_all/$file_name" ]; then
      # Create directory path if it doesn't exist
      mkdir -p $(eval echo "$file_path")
      # Copy file to specified path
      if cp "$FILE_DIRECTORY/$directory_all/$file_name" "$file"; then
        echo -e " [${GREEN}OK${NC}] Copied $file_name to $file_path"
      else 
        echo -e " [${RED}ERROR${NC}] Error while copying $file_name"
      fi
    # Checks if file is a directory (if it is, it will exports all files in the directory)
    elif [ -d "$file" ]; then
      rel_path="${file#${1/\~/$HOME}}"
      file+="/*"
      directory_all+="/$rel_path"
      export_files "$file" "$directory_all"
    elif [ ! -z "$file" ]; then
      if [ "$file_name" == "*" ]; then
        echo -e " [${RED}ERROR${NC}] No files in $FILE_DIRECTORY/$directory_all"
      else
        echo -e " [${RED}ERROR${NC}] $file_name does not exist in $FILE_DIRECTORY/$directory_all"
      fi
    fi
  done
}

function commit(){
  # Detects directory of the backups	
  backup_directory=$(dirname "$1")
  # Moves to that directory
  cd "$backup_directory"
  if [ $? -eq 0 ]; then
    commit_message="$2"
    # Does the commit
    git add .
    git commit -m "$commit_message"
  fi
}

function push(){
  # Detects directory of the backups	
  backup_directory=$(dirname "$1")
  # Moves to that directory
  cd "$backup_directory"
  # Push
  git push
}

function pull(){
  # Detects directory of the backups	
  backup_directory=$(dirname "$1")
  # Moves to that directory
  cd "$backup_directory"
  # Push
  git pull
}

function edit(){
  $EDITOR "$1"
}

function check_diff(){
    file_all=$(eval echo "$1")
    file_path=$(dirname "$1")

  for file in $file_all; do
    directory_all=$(eval echo "$2")
    file_name=$(basename "$file")
    # Check if file exists in backup directory
    if [ -f "$FILE_DIRECTORY/$directory_all/$file_name" ]; then
      # Checks diff in file
      diff -u --color "$FILE_DIRECTORY/$directory_all/$file_name" "$file"
      if [ $? -eq 0 ]; then
        echo -e " [${GREEN}OK${NC}] There are no changes in: $file"
      else
        read -n 1 -p "Press 'q' to exit ; Press any other key to compare next file " key < /dev/tty  
        if [[ ${key,,} == 'q' ]]; then
          return
        fi
      fi
    elif [ -d "$file" ]; then
      rel_path="${file#${1/\~/$HOME}}"
      file+="/*"
      directory_all+="/$rel_path"
      check_diff "$file" "$directory_all"
    elif [ ! -z "$file" ]; then
      if [ "$file_name" == "*" ]; then
        echo -e " [${RED}ERROR${NC}] No files in $(dirname $file)"
      else
        echo -e " [${RED}ERROR${NC}] $file_name does not exist in $FILE_DIRECTORY/$directory_all"
      fi
    fi
  done
}

function help(){
  echo -e "Usage: baup [OPTIONS]...\nAn easy way to make backups.\n"
  echo -e "\t edit       \tEdits the file where you specify the files to import/export"
  echo -e "\t-h, --help  \tOpens this help menu"
  echo -e "\t-i, --import\tImports the config files to the backup directory"
  echo -e "\t-e, --export\tExports the config files from the backup directory"
  echo -e "\t-c, --commit\tCreates (using git) a commit in the backup directory. The argument that follows will be used as commit message"
  echo -e "\t-p, --push  \tPushes (using git) any changes in the backup directory"
  echo -e "\t-l, --pull  \tPulls from the directory in which the files are stored"
  echo -e "\t-d, --diff  \tChecks for any changes in the configuration files (comparing to the backup directory)\n"
}

if [ "$#" -eq 0 ]; then
  help
elif [ "$#" -eq 1 ] && [ $1 == "edit" ]; then
  edit $FILE
else
  for (( i=1; i<=$#; i++)); do
    j=$((i+1))
    case ${!i} in
      "-h" | "--help")
        help
        break
        ;;
      "-i" | "--import")
        while IFS=';' read -r file directory; do
        import_files $file $directory
        done < $FILE
        ;;
      "-e" | "--export")
        while IFS=';' read -r file directory; do
        export_files $file $directory
        done < $FILE
        ;;
      "-c" | "--commit")
        if [ $j -le $# ]; then
          commit $FILE "${!j}"
          ((i++))
        else
          echo -e "[${RED}ERROR${NC}] No commit message passed"
          break
        fi
        ;;
      "-p" | "--push")
        push $FILE
        ;;
      "-l" | "--pull")
        pull $FILE
        ;;
      "-d" | "--diff")
        while IFS=';' read -r file directory; do
        check_diff $file $directory
        done < $FILE
        ;;
      *)
        echo "Argumento: ${!i}"
        ;;
    esac
  done
fi
